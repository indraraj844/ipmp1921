AVL tree is a self-balancing Binary Search Tree (BST) where the difference between heights of left
and right subtrees cannot be more than one for all nodes. 

2. why
Most of the BST operations (e.g., search, max, min, insert, delete.. etc) take O(h) time where
h is the height of the BST. The cost of these operations may become O(n) for a skewed Binary tree.
If we make sure that height of the tree remains O(Logn) after every insertion and deletion, then
we can guarantee an upper bound of O(Logn) for all these operations.The height of an AVL tree is
always O(Logn) where n is the number of nodes in the tree (See this video lecture for proof). 

3. rotation with balance factor
1.1 left rotation (>1)
1.2 right rotation (<-1)
1.3 left right rotation(<-1)
1.4 right left rotation(>1)


